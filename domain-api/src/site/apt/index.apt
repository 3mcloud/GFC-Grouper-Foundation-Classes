Grouper Foundation Classes (GFC)

    Aligning with HIS TLO strategies and addressing CER challenges:

	* Ensuring proper operation in SOA environment
	
	* Modernizing grouper architecture (data handling, code architecture, interfacing, OO design)
	
	* Optimizing performance (multi-threading, multi-processing capability, efficient architecture)
	
	* Lowering maintenance cost
	
	* Producing more reusable code
	
	* Simplifying the code base
	
	* Dependency management
	
	* Inter-component dependency management
	
	* Providing legacy compatibility
	
	* Creating a more consistent design between our deliverables

	[]

	Creating and administering a reusable and extensible foundation class library, on which and through
	which all future C&ER components will be built, consisting of common framework and common 
	business objects that support our primary grouper deliverables.

Other info

	* {{{./distribution-management.html}Distribution}}

	* {{{./usage.html}Usage and examples}}

	* {{{./component-runtime.html}Component Runtime}}
	
	* {{{./domainant-deploy.html}DomaintAnt Deploy}}
